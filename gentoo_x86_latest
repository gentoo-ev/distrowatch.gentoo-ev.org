#!/usr/bin/env python3
# Create a list of latest stable and testing x86 packages in Gentoo
# Copyright (C) Sebastian Pipping <sebastian@pipping.org>
# GPLv3 or later
# 1.5, 2023-03-04 19:28 UTC+1

import os
from functools import cmp_to_key
from portage.versions import catpkgsplit, vercmp
import glob

# config
OUTPUT_DIR = 'htdocs/x86/'
STABLE_FILENAME = os.path.join(OUTPUT_DIR, 'latest_stable.txt')
TESTING_FILENAME = os.path.join(OUTPUT_DIR, 'latest_unstable.txt')

tree = {}

def get_latest(version_revision_set):
    return sorted(version_revision_set, key=cmp_to_key(vercmp))[-1]

def add_ebuild(category_package, stable, version_revision):
    # print category_package, stable, version_revision
    if category_package not in tree:
        tree[category_package] = {}
    if stable not in tree[category_package]:
        tree[category_package][stable] = set()
    tree[category_package][stable].add(version_revision)

# print 'Scanning'
for ebuild_filename in glob.glob('/usr/portage/*/*/*.ebuild'):
    split_up = ebuild_filename.split('/')

    category_package = '/'.join(split_up[-3:-1])

    cpv = '%s/%s' % (split_up[-3], split_up[-1][0:-len('.ebuild')])
    _version_revision = catpkgsplit(cpv)[-2:]
    if _version_revision[0].find('9999') != -1:
        continue

    # Ignore revision for now to make post-processing
    # on DistroWatch side easier
    """
    if _version_revision[1] == 'r0':
        version_revision = _version_revision[0]
    else:
        version_revision = '-'.join(_version_revision)
    """
    version_revision = _version_revision[0]

    f = open(ebuild_filename, 'r')
    all_keyword_line = [e for e in f.readlines() if e.lstrip().startswith('KEYWORDS=')]
    f.close()
    if not all_keyword_line:
        continue
    keyword_line = all_keyword_line[0]
    x86_pos = keyword_line.find('x86')
    if x86_pos != -1:
        op = keyword_line[x86_pos - 1]
        stable = False
        if op in ('"', '\'', ' '):
            stable = True
        elif op == '-':
            continue
    add_ebuild(category_package, stable, version_revision)

STABLE = True
UNSTABLE = False

# print 'Writing'
s = open(STABLE_FILENAME, 'w')
t = open(TESTING_FILENAME, 'w')
for category_package, stable_testing in sorted(tree.items(), key=lambda x: x[0].lower()):
    try:
        latest_stable = get_latest(stable_testing[STABLE])
        s.write('%s %s\n' % (category_package, latest_stable))
    except (KeyError, IndexError):
        pass
    try:
        latest_testing = get_latest(
            stable_testing.get(STABLE, set()).union(
            stable_testing.get(UNSTABLE, set())))
        t.write('%s %s\n' % (category_package, latest_testing))
    except IndexError:
        pass
s.close()
t.close()
# print 'Done'
